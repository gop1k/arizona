<?xml version="1.0" encoding="utf-8"?>
<svg id="app" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
     width="100%" height="100%" viewBox="0 0 1200 800" preserveAspectRatio="xMidYMid slice">
  <defs>
    <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
      <feGaussianBlur stdDeviation="6" result="blur"/>
      <feMerge>
        <feMergeNode in="blur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>

    <filter id="xglow" x="-60%" y="-60%" width="220%" height="220%">
      <feGaussianBlur stdDeviation="12" result="b"/>
      <feColorMatrix type="matrix" values="1 0 0 0 0   0 0.8 0 0 0   0 0 1 0 0   0 0 0 1 0"/>
      <feMerge>
        <feMergeNode in="b"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>

    <linearGradient id="bgGrad" x1="0" x2="1" y1="0" y2="1">
      <stop offset="0%" stop-color="#061126">
        <animate attributeName="stop-color" dur="12s" repeatCount="indefinite" values="#061126;#1b0526;#061126"/>
      </stop>
      <stop offset="100%" stop-color="#0a1a2b">
        <animate attributeName="stop-color" dur="10s" repeatCount="indefinite" values="#0a1a2b;#052028;#0a1a2b"/>
      </stop>
    </linearGradient>

    <filter id="grain">
      <feTurbulence type="fractalNoise" baseFrequency="0.9" numOctaves="1" stitchTiles="stitch" result="noise"/>
      <feColorMatrix type="saturate" values="0"/>
      <feBlend in="SourceGraphic"/>
    </filter>

    <linearGradient id="glass" x1="0" x2="0" y1="0" y2="1">
      <stop offset="0" stop-color="rgba(255,255,255,0.06)"/>
      <stop offset="1" stop-color="rgba(255,255,255,0.02)"/>
    </linearGradient>

    <linearGradient id="neonFill" x1="0" x2="1">
      <stop offset="0%" stop-color="#3fffdc"/>
      <stop offset="50%" stop-color="#5a3bff"/>
      <stop offset="100%" stop-color="#ff3b99"/>
      <animateTransform attributeName="gradientTransform" type="translate" dur="6s" repeatCount="indefinite" from="-1 0" to="1 0"/>
    </linearGradient>

    <g id="particle">
      <circle cx="0" cy="0" r="1.8" fill="#fff" opacity="0.9" />
    </g>

    <filter id="cardShadow" x="-50%" y="-50%" width="200%" height="200%">
      <feOffset dx="0" dy="6" result="o"/>
      <feGaussianBlur in="o" stdDeviation="14" result="s"/>
      <feMerge>
        <feMergeNode in="s"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>

  <style><![CDATA[
    svg { font-family: Inter, "Segoe UI", Arial, sans-serif; }
    text { user-select: none; }
    .btn { cursor: pointer; }
    /* fallback for rgba in gradients for some renderers */
    rect[fill^="rgba"] { vector-effect: non-scaling-stroke; }
  ]]></style>

  <!-- background -->
  <rect width="1200" height="800" fill="url(#bgGrad)"/>
  <radialGradient id="vign" cx="50%" cy="40%" r="70%">
    <stop offset="60%" stop-color="rgba(0,0,0,0)"/>
    <stop offset="100%" stop-color="rgba(0,0,0,0.6)"/>
  </radialGradient>
  <rect width="1200" height="800" fill="url(#vign)"/>

  <!-- moving diagonal neon bars -->
  <g id="bars" opacity="0.15" filter="url(#glow)">
    <rect x="-1600" y="-200" width="2600" height="80" fill="#5a3bff" transform="rotate(-12)">
      <animate attributeName="x" dur="22s" repeatCount="indefinite" values="-1600;0;-1600"/>
    </rect>
    <rect x="-1400" y="180" width="2600" height="60" fill="#ff3b99" transform="rotate(-12)">
      <animate attributeName="x" dur="18s" repeatCount="indefinite" values="-1400;0;-1400"/>
    </rect>
  </g>

  <!-- particles -->
  <g id="particles" opacity="0.9">
    <g transform="translate(200,120)" opacity="0.7">
      <use href="#particle">
        <animateTransform attributeName="transform" type="translate" dur="9s" repeatCount="indefinite" values="0 0;20 -30;0 0"/>
      </use>
    </g>
    <g transform="translate(900,90)" opacity="0.6">
      <use href="#particle">
        <animateTransform attributeName="transform" type="translate" dur="11s" repeatCount="indefinite" values="0 0;-30 20;0 0"/>
      </use>
    </g>
    <g transform="translate(520,600)" opacity="0.5">
      <use href="#particle">
        <animateTransform attributeName="transform" type="translate" dur="13s" repeatCount="indefinite" values="0 0;15 -25;0 0"/>
      </use>
    </g>
    <g transform="translate(1100,420)" opacity="0.35">
      <use href="#particle">
        <animateTransform attributeName="transform" type="translate" dur="7s" repeatCount="indefinite" values="0 0;-40 40;0 0"/>
      </use>
    </g>
  </g>

  <!-- main glass panel -->
  <g id="mainCard" transform="translate(120,100)" filter="url(#cardShadow)">
    <rect x="0" y="0" rx="18" ry="18" width="960" height="560" fill="rgba(255,255,255,0.02)" stroke="rgba(255,255,255,0.04)"/>
    <rect x="0" y="0" rx="18" ry="18" width="960" height="560" fill="url(#glass)"/>
    <rect x="4" y="4" rx="14" ry="14" width="952" height="552" fill="none" stroke="#3fffdc" stroke-opacity="0.06"/>
  </g>

  <!-- neon headline -->
  <g id="title" transform="translate(160,180)">
    <text x="0" y="0" font-size="72" font-weight="700" fill="url(#neonFill)" filter="url(#xglow)">
      <tspan x="0" dy="0">NEON</tspan>
      <tspan x="0" dy="86" font-size="42">SVG — full page demo</tspan>
    </text>
    <rect x="0" y="18" width="260" height="6" rx="3" fill="#3fffdc" opacity="0.18">
      <animate attributeName="opacity" values="0.05;0.18;0.05" dur="3s" repeatCount="indefinite"/>
    </rect>
  </g>

  <!-- CTA buttons -->
  <g id="cta" transform="translate(160,320)">
    <g class="btn" id="btn-1" transform="translate(0,0)">
      <rect x="0" y="0" width="220" height="56" rx="10" fill="rgba(255,255,255,0.03)" stroke="#5a3bff" stroke-width="1" filter="url(#glow)"/>
      <text x="110" y="36" text-anchor="middle" font-size="20" fill="#fff" opacity="0.95">Explore</text>
      <rect x="-4" y="-4" width="228" height="64" rx="14" fill="none" stroke="#5a3bff" stroke-opacity="0" class="btnHover"/>
    </g>

    <g class="btn" id="btn-2" transform="translate(250,0)">
      <rect x="0" y="0" width="220" height="56" rx="10" fill="rgba(255,255,255,0.02)" stroke="#3fffdc" stroke-width="1"/>
      <text x="110" y="36" text-anchor="middle" font-size="20" fill="#fff" opacity="0.95">Portfolio</text>
      <rect x="-4" y="-4" width="228" height="64" rx="14" fill="none" stroke="#3fffdc" stroke-opacity="0" class="btnHover"/>
    </g>

    <g class="btn" id="btn-3" transform="translate(500,0)">
      <rect x="0" y="0" width="220" height="56" rx="10" fill="rgba(255,255,255,0.02)" stroke="#ff3b99" stroke-width="1"/>
      <text x="110" y="36" text-anchor="middle" font-size="20" fill="#fff" opacity="0.95">Contact</text>
      <rect x="-4" y="-4" width="228" height="64" rx="14" fill="none" stroke="#ff3b99" stroke-opacity="0" class="btnHover"/>
    </g>
  </g>

  <!-- info column -->
  <g id="info" transform="translate(740,160)">
    <g transform="translate(0,0)">
      <rect x="0" y="0" width="360" height="120" rx="12" fill="rgba(255,255,255,0.02)" stroke="rgba(255,255,255,0.03)"/>
      <text x="24" y="36" font-size="18" fill="#cfe9ff">Made with <tspan fill="#fff">SVG</tspan></text>
      <text x="24" y="64" font-size="14" fill="#aabbd1">Animations • Neon • Parallax</text>
    </g>

    <g transform="translate(0,150)">
      <rect x="0" y="0" width="360" height="160" rx="12" fill="rgba(255,255,255,0.015)" stroke="rgba(255,255,255,0.03)"/>
      <text x="24" y="36" font-size="16" fill="#cfe9ff">Runtime</text>
      <text id="fps" x="24" y="70" font-size="12" fill="#9fb8d8">Calculating...</text>
    </g>
  </g>

  <!-- footer -->
  <g transform="translate(160,680)">
    <rect x="0" y="0" width="880" height="1.5" fill="#ffffff" opacity="0.03"/>
    <text x="0" y="26" font-size="12" fill="#9fb8d8">© Neon SVG — fully vector demo</text>
  </g>

  <rect id="pointerCapture" x="0" y="0" width="1200" height="800" fill="transparent" />

  <circle id="mouseLight" cx="-200" cy="-200" r="80" fill="#3fffdc" opacity="0.06" filter="url(#glow)" pointer-events="none"/>

  <text x="1100" y="790" font-size="10" fill="#7f9fbf">SVG site • interactive • 100% vector</text>

  <script type="application/ecmascript"><![CDATA[
    (function(){
      const svg = document.getElementById('app');
      const mouseLight = document.getElementById('mouseLight');
      const fpsText = document.getElementById('fps');
      let last = performance.now();
      let frames = 0;

      svg.addEventListener('mousemove', e => {
        const rect = svg.getBoundingClientRect();
        const gx = e.clientX - rect.left;
        const gy = e.clientY - rect.top;
        mouseLight.setAttribute('cx', gx);
        mouseLight.setAttribute('cy', gy);
        const x = (e.clientX - rect.left) / rect.width;
        const y = (e.clientY - rect.top) / rect.height;
        const mainCard = svg.querySelector('#mainCard');
        const tx = (x - 0.5) * 18;
        const ty = (y - 0.5) * 10;
        mainCard.setAttribute('transform', 'translate(' + (120+tx) + ',' + (100+ty) + ')');
      });

      const buttons = Array.from(svg.querySelectorAll('.btn'));
      buttons.forEach(b=>{
        b.addEventListener('mouseenter', ()=>{
          const hover = b.querySelector('.btnHover');
          if(hover) { hover.setAttribute('stroke-opacity','0.3'); hover.setAttribute('stroke-width','2'); }
          const r = b.querySelector('rect');
          if(r) r.setAttribute('fill','rgba(255,255,255,0.04)');
        });
        b.addEventListener('mouseleave', ()=>{
          const hover = b.querySelector('.btnHover');
          if(hover) { hover.setAttribute('stroke-opacity','0'); hover.setAttribute('stroke-width','1'); }
          const r = b.querySelector('rect');
          if(r) r.setAttribute('fill','rgba(255,255,255,0.02)');
        });
        b.addEventListener('click', ()=>{
          const ripple = document.createElementNS('http://www.w3.org/2000/svg','circle');
          ripple.setAttribute('cx',110); ripple.setAttribute('cy',28); ripple.setAttribute('r',6);
          ripple.setAttribute('fill','none'); ripple.setAttribute('stroke','#fff'); ripple.setAttribute('stroke-opacity','0.18'); ripple.setAttribute('stroke-width','2');
          b.appendChild(ripple);
          const anim = ripple.animate([
            { r:6, opacity:0.18 },
            { r:70, opacity:0 }
          ], { duration:600, easing:'cubic-bezier(.2,.9,.2,1)' });
          anim.onfinish = ()=> ripple.remove();
        });
      });

      function tick(now){
        frames++;
        if(now - last >= 1000){
          const fps = Math.round((frames*1000)/(now-last));
          fpsText.textContent = fps + ' fps';
          frames = 0;
          last = now;
        }
        requestAnimationFrame(tick);
      }
      requestAnimationFrame(tick);

      function resize(){
        const w = window.innerWidth, h = window.innerHeight;
        svg.setAttribute('viewBox', '0 0 ' + Math.max(1200, w) + ' ' + Math.max(800, h));
      }
      window.addEventListener('resize', resize);
      resize();
    })();
  ]]></script>
</svg>
